/*
.env es solo un archivo plano donde tÃº defines variables de entorno como esta: PORT=4000
Y para poder usarlo en tu app de Node.js necesitas esta lÃ­nea al inicio de tu index.js
process es una variable global que viene con Node.js
process es un objeto global que existe en cualquier aplicaciÃ³n Node.js.
Dentro de Ã©l, process.env es un objeto que guarda variables de entorno.
--------------------------------------------------------------------------------------------
 express() es una funciÃ³n que viene del mÃ³dulo Express.
ðŸ”¹ Al ejecutarla, devuelve una "instancia de una aplicaciÃ³n de Express".
ðŸ”¹ Esa instancia se guarda en la constante app.
app es la que usas para:
-Definir middlewares: app.use(...)
-Definir rutas: app.get('/ruta', handler)
-Escuchar el puerto del servidor: app.listen(port, ...)

Es como si dijeras:
"Crea mi servidor Express, guÃ¡rdalo en una variable para poder configurarlo."

Cuando ejecutas: const app = express();
EstÃ¡s ejecutando una funciÃ³n que hace lo siguiente :
1-"Crea una aplicaciÃ³n" (app): Internamente,
Express crea un objeto que extiende funcionalidades de un servidor HTTP (como el que creas con Node.js).
2-"Le aÃ±ade funcionalidades de middleware y rutas": Ese objeto tiene mÃ©todos como:
app.get()
app.post()
app.use()
app.listen()
etc.
Todo eso estÃ¡ basado en algo llamado Router,
que es una mini app dentro de Express para manejar rutas y middlewares.
3-"Le da comportamiento como servidor web": Lo conecta con Node.js, 
asÃ­ que cuando haces app.listen(port), en realidad estÃ¡s levantando un servidor HTTP.

Â¿QuÃ© hay en esa instancia?
La constante app contiene un objeto especial con un montÃ³n de funcionalidades. 
Algunas de las mÃ¡s comunes:
app.use() â†’ para usar middlewares globales.
app.get() / app.post() / app.put() â†’ para manejar rutas.
app.listen() â†’ para iniciar el servidor.
app.set() / app.get() (configuraciÃ³n interna).
app.locals â†’ para compartir datos globales.
Todo esto estÃ¡ montado sobre una base de Node.js, usando http.createServer().


Si tÃº mismo quisieras hacer algo parecido a Express, podrÃ­as hacer algo como:

const http = require('http');

const app = (req, res) => {
  res.end('Hola desde mi mini servidor');
};

http.createServer(app).listen(3000);

Express simplemente "facilita" todo ese proceso con una estructura muy amigable para manejar rutas,
middlewares, JSON, etc.
------------------------------------------------------------------------

Explicando app.use(express.json());

express.json() es un middleware de Express
Un middleware es una funciÃ³n que se ejecuta entre que se recibe una peticiÃ³n y se envÃ­a la respuesta.

Sirven para interceptar, modificar, validar o procesar los datos antes de que lleguen
al controlador final o despuÃ©s de que salgan de Ã©l.

Â¿Para quÃ© sirven?
ðŸ”¹ 1. Procesar el cuerpo de la peticiÃ³n
Cuando alguien envÃ­a datos (por ejemplo, desde un formulario),
los middlewares pueden ayudar a leer ese contenido

app.use(express.json()); // Permite leer JSON del cuerpo de la peticiÃ³n

2. Validaciones
PodrÃ­as tener un middleware que revise si todos los datos requeridos estÃ¡n presentes
antes de crear una tarea, por ejemplo:

function validarDatos(req, res, next) {
  if (!req.body.titulo) {
    return res.status(400).send('Falta el tÃ­tulo');
  }
  next(); // todo bien, sigue al controlador
}


3. AutenticaciÃ³n
Antes de permitir el acceso a una ruta protegida, puedes revisar si el usuario estÃ¡ autenticado:
function verificarToken(req, res, next) {
  if (!req.headers.authorization) {
    return res.status(401).send('No autorizado');
  }
  next();
}

4. Logs / debug
function logger(req, res, next) {
  console.log(`${req.method} ${req.url}`);
  next();
}

        ==========

express.json() no es lo mismo que JSON.parse()

*/



require('dotenv').config();
const express = require('express');
const app = express();
const routes = require('./routes/index');
const logger = require('./middlewares/logger');

const port = process.env.PORT || 3000;

app.use(logger);
app.use(express.json());
app.use('/', routes);

app.listen(port, () => {
  console.log(`Servidor corriendo en http://localhost:${port}`);
});
